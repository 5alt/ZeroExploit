# -*- coding: utf-8 -*-
import sys, json, time
import config

from tornado_proxy.proxy import ProxyHandler, ProxyServer
from lib.httphelper import mark_unique, process_post_body, check_lang

import lib.detector
import hashlib

import os

py3k = sys.version_info.major > 2
if py3k:
	from urllib import parse as urlparse
else:
	import urlparse

def obj2Dict(obj):
	ret = {}
	for i in obj:
		ret[i] = obj[i]
	return ret

def parseReq(request, rtype):
	#rtype 代表post的类型
	#'multipart'/'json'/'qs'/'raw'/rewrite
	Entity={}
	Entity['rtype']=rtype
	Entity['body']=request.body
	Entity['protocol']=request.protocol
	Entity['remote_ip']=request.remote_ip
	Entity['host']=request.host
	Entity['method']=request.method
	Entity['uri']=request.uri
	Entity['version']=request.version
	Entity['headers']=obj2Dict(request.headers)
	return Entity

def parseRsp(res, response_body, flag, raw_response_body):
	Entity={}
	Entity['code']=res.code
	Entity['headers']=obj2Dict(res.headers)
	if flag:
		Entity['response_body']=response_body[:config.max_save_size]
	else:
		Entity['response_body']= 'ignored:'+hashlib.md5(raw_response_body).hexdigest()
	return Entity

def makeFullUri(uri, host, protocol):
	if urlparse.urlparse(uri).scheme:
		return uri
	else:
		return protocol+'://'+host+os.path.normpath(uri)

class RequestProxy(ProxyHandler):
	def newgidtype(self, req, res):
		# 如果是ajax请求，合并到上一个group
		last = config.dbconn().fetch_rows('http', '*', {'type': 1}, order='time desc', limit=1, fetchone=True)
		if not last: return 1,1
		if req.headers.get('x-requested-with', '').lower() == 'xmlhttprequest' or 'xml' in res.headers.get('content-type', '') or 'json' in res.headers.get('content-type', ''):
			return last['gid'],2
		elif 'html' in res.headers.get('content-type', '') and time.time()-last['time']>3:
			return last['gid']+1,1
		else:
			return last['gid'],3

	def request_handler(self, request):
		pass

	def response_handler(self, request, response, response_body):
		pass

	def save_handler(self, request, response, response_body):
		#check res.status
		#if re.match(config.filter_code, str(res.status)): return
		reqtype = 'qs'

		raw_response_body = ''

		if request.body:
			request.body = request.body.decode('utf-8','ignore')
		if response_body:
			raw_response_body = response_body
			response_body = response_body.decode('utf-8','ignore')
		request.uri = makeFullUri(request.uri, request.host, request.protocol)

		parsed = urlparse.urlparse(request.uri)

		#check host
		if config.included_host and not len([h for h in config.included_host if request.host.endswith(h)]): return
		if len([h for h in config.excluded_host if request.host.endswith(h)]): return
		#check fileext
		if len([h for h in config.filter_file if parsed.path.endswith(h)]): return

		path = os.path.normpath(parsed.path)
		#check query string
		if request.method == 'GET' and not parsed.query:
			if os.path.splitext(path)[1]: return
			if len(path.split('/')) < 3: return
			reqtype = 'rewrite'

		#don' save response body into database
		save_body = True
		#check query, get must have query string or url-rewrited
		#GET method, have ext and do not have query string
		#if os.uri.splitext(request.uri)[1] and request.method == 'GET' and not urlparse.urlparse(request.uri).query: save_body = False
		#only some content-type save to database
		if config.filter_content_type and not len([h for h in config.filter_content_type if h in response.headers.get('content-type', '')]): save_body = False

		conn = config.dbconn()

		separator = None
		args = {}

		if 'multipart/form-data;' in request.headers.get('content-type', ''):
			separator = request.headers.get('content-type').split("=")[-1]
		
		if request.method == 'POST':
			reqtype, args, files = process_post_body(request.body, separator)

		signature = mark_unique(request.uri, args)

		if conn.fetch_rows('http', condition={'signature': signature}, fetchone=True):
			return

		# site basic info
		siteinfo = conn.fetch_rows('siteinfo', '*', {'host': request.host, 'key': 'lang'}, fetchone=True)
		if not siteinfo:
			lang, framework = check_lang(request, response)
			conn.insert('siteinfo', {'host': request.host, 'key': 'lang', 'value': lang})
			conn.insert('siteinfo', {'host': request.host, 'key': 'framework', 'value': framework})

		if siteinfo and siteinfo.get('value', '') == 'unkonwn':
			lang = check_lang(request.uri)
			conn.update('siteinfo', {'value': lang}, condition={'host': request.host, 'key': 'lang'})


		req = parseReq(request, reqtype)
		rsp = parseRsp(response, response_body, save_body, raw_response_body)

		
		gid, rtype = self.newgidtype(request, response)

		data = {'gid':gid, 'host': request.host,'req':json.dumps(req), 'rsp':json.dumps(rsp), 'time':time.time(), 'type':rtype, 'signature': signature}
		conn.insert('http', data)

		detector = [i for i in dir(lib.detector) if i.startswith('detect_')]
		for d in detector:
			try:
				c = getattr(lib.detector,d)
				c(req, rsp)
			except Exception as e:
				print e

if __name__ == "__main__":
	try:
		proxy = ProxyServer(RequestProxy, inbound_ip=config.proxy_host, inbound_port=config.proxy_port)
		proxy.start()
	except KeyboardInterrupt:
		proxy.stop()


