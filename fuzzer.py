# -*- coding: utf-8 -*-
from Queue import Empty
import multiprocessing
import time
import sys
import imp
from os import listdir,path
import config
import os, signal

from framework.result import Result

def with_color(c, s):
	return "\x1b[%dm%s\x1b[0m" % (c, s)

class fuzzer():
	def __init__(self):
		config.pool = multiprocessing.Pool(processes=2)
		self.path = config.EXPLOITS_PATH

	def update(self):
		self.modules = []
		for f in os.listdir(self.path):
			if f.endswith('.py'):
				self.modules.append(f[:-3])

	def run(self):
		while True:
			self.update()
			try:
				(fname,Entity,start_time) = config.queue.get(timeout=1)
				for module_name in self.modules:
					config.pool.apply_async(AttackTargets, args = (module_name, Entity,), callback = Result(fname,Entity, module_name).callback)
			except Empty:
				time.sleep(3)
			except KeyboardInterrupt:
				return

def AttackTargets(module_name ,Entity):
	signal.signal(signal.SIGALRM, timeout_handler)
	try:
		module = imp.load_source(module_name, config.EXPLOITS_PATH+ os.sep + module_name + '.py')
		timeout = module.timeout if module.timeout else config.EXPLOIT_TIMEOUT
		signal.alarm(timeout)
		ret = module.exploit(Entity)
		signal.alarm(0)  
		return ret
	except TimeoutError:
		print 'timeout'
	except Exception as e:
		print ('`%s`: %s' % (module_name, e))
		signal.alarm(0)  

	
class TimeoutError(Exception):
	pass

def timeout_handler(signum, frame):
	raise TimeoutError()

if __name__ == '__main__':
	config.queue = multiprocessing.Queue()
	config.queue.put((1,2,3))
	inj = myinjector()
	inj.run()


