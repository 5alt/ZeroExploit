// ==UserScript==
// @name         XSSHelper
// @version      0.1
// @description  XSS Helper
// @exclude      http://*.google.com/*
// @exclude      https://*.google.com/*
// @grant        none
// @run-at document-start
// ==/UserScript==


// @match        http://*/*
// @match        https://*/*

//md5_salt
__XSSHelper_reporturl = "http://127.0.0.1:5000/report_log";
function __XSSHelper_ReportDetection(method, info){
    //var url = __XSSHelper_reporturl+"?url="+escape(window.location.href)+"&method="+escape(method)+"&info="+escape(info);
    //new Image().src=url;
    var xmlhttp=new XMLHttpRequest();
    xmlhttp.open("POST",__XSSHelper_reporturl,true);
    xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
    xmlhttp.send("url="+escape(window.location.href)+"&method="+escape(method)+"&info="+escape(info));
}

// hook window.onerror
(function() {
    __XSSHelper_onerror = window.onerror;
    window.onerror = function (msg, url, lineNo, columnNo, error) {
        if(__XSSHelper_onerror) __XSSHelper_onerror();
        var string = msg.toLowerCase();
        var substring = "script error";
        if (string.indexOf(substring) > -1){
            //alert('Script Error: See Browser Console for Detail');
            var message = [
                'Message: ' + msg,
                'URL: ' + url,
                'Line: ' + lineNo,
                'Column: ' + columnNo,
                'Error object: ' + JSON.stringify(error)
            ].join('\n');
            __XSSHelper_ReportDetection('window.onerror: script error', message);
        } else {
            var message = [
                'Message: ' + msg,
                'URL: ' + url,
                'Line: ' + lineNo,
                'Column: ' + columnNo,
                'Error object: ' + JSON.stringify(error)
            ].join('\n');
            if(msg.indexOf('SyntaxError') != -1 || msg.indexOf('Uncaught ReferenceError') != -1){
                console.log(message);
                __XSSHelper_ReportDetection('window.onerror: SyntaxError', message);
            }
        }

        return false;
    };

})();

function __XSSHelper_GetQueryParams() {
    var url = location.search; //获取url中"?"符后的字串
    var theRequest = new Object();
    if (url.indexOf("?") != -1) {
        var str = url.substr(1);
        strs = str.split("&");
        for(var i = 0; i < strs.length; i ++) {
            theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
        }
    }
    return theRequest;
}

// find flash
/*
(function() {
    setTimeout(function(){
        var urls = performance.getEntries();
        have_flash = false;
        urls.forEach(function(e){
            if(e.name.indexOf(".swf") !== -1){
                have_flash = true;
                console.warn("%c"+location.hostname+' 发现Flash:'+e.name,"color:red;font-size:13px");
            }
        });
        if(have_flash) __XSSHelper_ReportDetection('flash', 'Flash found!');
    }, 5000);
})();
*/
//hook innerHTML
(function () {
    var setter = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set;
    Object.defineProperty(Element.prototype, 'innerHTML', {
        set: function innerHTML_Setter(val) {
            /*
                console.group();
                console.log('innerHTML on Object:', this);
                console.log('Value:', JSON.stringify(val));
                var stack = new Error().stack;
                // Remove this function from the stack:
                stack = stack.trim().split('\n').slice(1).join(' <- ')
                console.log('Stack: ', stack)
                console.groupEnd(); */
            params = __XSSHelper_GetQueryParams();
            if(window.location.hash.substr(1)) params["__local_hash"] = window.location.hash.substr(1);
            var info = '';
            for (var key in params){
                if(val.indexOf(params[key]) !== -1 && isNaN(params[key])){
                    console.group();
                    //console.log(document.currentScript.src);
                    console.log('innerHTML on Object:', this);
                    console.log('Key:', JSON.stringify(key));
                    console.log('Value:', JSON.stringify(val.substr(0, 256)));
                    var stack = new Error().stack;
                    // Remove this function from the stack:
                    stack = stack.trim().split('\n').slice(1).join(' <- ');
                    console.log('Stack: ', stack);
                    console.groupEnd();
                    info += [
                        'innerHTML on Object: ' + this,
                        'Key: ' + key,
                        'Value: ' + params[key],
                        'stack: ' + stack
                    ].join('\n')+"\n";
                    //alert("query appears in innerHTML");
                }
            }
            if(info){
                info += "\n\ninnerHTML: "+val;
                __XSSHelper_ReportDetection('innerHTML: query appears in innerHTML', info);
            }
            // call original innerHTML setter:
            return setter.call(this, val);
        }
    });
})();

//hook window.postMessage
(function () {
    window.__postMessage__ = window.postMessage;
    window.postMessage = function(){
        if(arguments[1] == "*"){
            //alert("Post Message origin is *!");
            console.log(arguments[0]);
            console.log(document.currentScript.src);
            info = ["Data: "+arguments[0],
                    "origin: "+arguments[1],
                   "srcUrl: "+document.currentScript.src].join('\n');
            __XSSHelper_ReportDetection('window.postMessage: origin is *', info);
        }
        window.__postMessage__.apply(this, arguments);
    };
})();

// check onmessage
(function () {
    // 储存被 Hook 的函数
    var EventTarget_addEventListener = EventTarget.prototype.addEventListener;
    var document_addEventListener = document.addEventListener;

    // Hook addEventListener proc
    function addEventListener(type, func, useCapture) {
        var _addEventListener = this === document ? document_addEventListener : EventTarget_addEventListener;

        if(this === window && type === 'message'){
            console.log("window.onmessage found");
            console.log(func);
            info = ["Function: "+func].join('\n');
            __XSSHelper_ReportDetection('window.onmessage: page has onmessage', info);
        }

        _addEventListener.apply(this, arguments);

    }
    // hook addEventListener
    EventTarget.prototype.addEventListener = addEventListener;
    document.addEventListener = addEventListener;
})();

//hook window.prompt
(function () {
    window.__prompt__ = window.prompt;
    window.prompt = function(){
        if(arguments[0] == 233){
            info = ["url: "+document.currentScript.src].join('\n');
            __XSSHelper_ReportDetection('window.prompt: xss found', info);
        }
        window.__prompt__.apply(this, arguments);
    };
})();